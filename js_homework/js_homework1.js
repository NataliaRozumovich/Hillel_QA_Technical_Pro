console.log('number' + 3 + 3)  /* number33   -> Тут відбувається неявне перетворення числа
 в стрінг та конкатенація між собою, і як результат зі стрінги та двох чисел ми отримуємо
 стрінг*/

console.log(null + 3); /* 3 -> Знову ж неявне перетворення null в 0: а потім 0+3=3 */

console.log(5 && "qwerty"); /* qwerty ->  Тут повернулося останнє значення так як оба
значення  true (як я прочитала в інших джерелах, що можна ще сказати, що відносяться до
 truthy values)
*/

console.log(+'40' + +'2' + "hillel"); /* 42hillel -> унарний плюс перетворює стрінгу "40" в
 число 40, також унарний плюс перетворює стрінг "2" в число 2. Потім відбувається додавання: 
 40 + 2 = 42. Та останнью дією відбувается неявне перетворення числа в стрінг та конкатенація 
 з наступною стрінгою*/

console.log('10' - 5 === 6); /* false -> Знову неявне перетворення: стрінга "10" перетворюється 
в число 10. Потім відбувається віднімання: 10-5=5. Останнім кроком відбувається порівняння 
5 та 6 за допомогою оператора строгої рівності і як результат  false */ 

console.log(true + false); /* 1 -> Тут true та false перетворюються в 1 та 0. Далі 
відбувається додавання: 1 + 0 = 1  */

console.log('4px' - 3); /* NaN ->  так як не можна стрінг "4рх" перетворити в число, то
 отримуємо NaN, а NaN - 3 = NaN
*/

console.log('4' - 3); /* 1 -> тут стрінг "4" перетворюється в число 4, потім відбувається
 віднимання: 4-3=1
*/

console.log('6' + 3 ** 0); /* 61 -> Тут спочатку відбувається в зведення у ступінь: 
3 ** 0 = 1, потім відбувається перетворення числа 1 на стрінг та конкатенація */

console.log(12 / '6'); /* 2 ->  Тут спочатку стрінг "6" перетворюэться в число 
і після цього відбувається ділення: 12/6=2 */

console.log('10' + (5 === 6)); /* 10false ->  Спочатку відбувається дія в 
скобках за допомогою оператора строгої рівності: 5 === 6 -> false,  потім відбувається 
перетворення булевого значення в стрінг та конкатенація з першим стрінгом:
 '10' + false = 10false*/

console.log(null == ''); /*false ->  так як null при операторі нестрогої рівності 
дорівнює тільки null або undefined, то null == '' -> false */

console.log(3 ** (9 / 3)); /* 27 ->  Тут спочатку відбувається дія в скобках: 9/3=3,
потом відбувається зведдення у ступінь 3 ** 3 = 27 */

console.log(!!'false' == !!'true'); /* true -> Тут !! використовується для того щоб привести 
значення до булевого типу, так як оба стрігові значення це true (truthy values): 
!!'false'  -> true та !!'true' -> true 
І як результат: true == true -> true */

console.log(0 || '0' && 1); /* 1 -> Як я прочитала, оператор && має пріорітет над операторм 
або ||, тобто при спочатку виконується '0' && 1, так як в цій частині все true 
(непуста строка та число це truthy values), то повертається останнє значення:
 '0' && 1 -> 1. Потім порівнюється 0 || 1, де 0 це false (falsy value), а 1 - це true, 
 || повертає перше true, то  0 || 1 -> 1 */

console.log((+null == false) < 1); /* false -> Спочатку відбуваються дії в скобках: 
+null перетворюється в 0, далі 0 == false -> true. Потім порівнюємо true < 1 та
 отримуємо false   */

console.log(false && true || true); /*true -> Cпочатку відбувається дія з 
логічним операторм і '&&' false && true  -> false (так як '&&' повертає перше false). 
Потім отримуємо: false || true -> true (так як '||' повертає перше true ) */

console.log(false && (false || true)); /* false -> Спочатку відбувається дія в скобках:
false || true - > true (так як '||' повертає перше true ). Потім
 false && true  -> false (так як '&&' повертає перше false)*/

console.log((+null == false) < 1 ** 5);/*  false -> спочатку дія в скобках:
+null -> 0, тобто отримуємо 0 == false -> true. Потім відбувається зведення в ступінь: 
1 ** 5 -> 1. І на останое порівнюємо true < 1 -> false.*/